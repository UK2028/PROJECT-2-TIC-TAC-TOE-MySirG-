#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

void display_matrix(char ch[3][3]);
int fill_choice(int player,char ch[3][3]);
int full_matrix(char ch[3][3]);
int winner(char ch[3][3]);
int player_filling(char ch[3][3],int choice);
void computer_filling(char ch[3][3],int m[3][3]);
int evil=0;

void display_matrix(char ch[3][3])
{
    int i=0,j=0;
    for(i=0;i<3;i++)
    {
        printf("   |   |   \n");
        for(j=0;j<3;j++)
        {
            if(j==2)
            {
                printf(" %c ",ch[i][j]);
            }
            else
            {
                printf(" %c |",ch[i][j]);
            }
        }
        if(i!=2)
            printf("\n___|___|___\n");
        else
            printf("\n   |   |   \n");
    }
}

int fill_choice(int player,char ch[3][3])
{
    int choice;
    char character;
    if(player==1)
        character='O';
    else
        character='X';
    printf("PLAYER %d, ENTER YOUR CHOICE: ",player);
    scanf("%d",&choice);
    char char_choice=choice+'0';
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            if(ch[i][j]==char_choice)
            {
                ch[i][j]=character;
                return 1;
            }
        }
    }
    return 0;
}

int full_matrix(char ch[3][3])
{
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            if(ch[i][j]!='O'&&ch[i][j]!='X')
                return 0;
        }
    }
    return 1;
}

int winner(char ch[3][3])
{
    int i=0;
    for(i=0;i<3;i++)
    {
        if(ch[i][0]==ch[i][1]&&ch[i][1]==ch[i][2])
            return 1;
    }
    for(i=0;i<3;i++)
    {
        if(ch[0][i]==ch[1][i]&&ch[1][i]==ch[2][i])
            return 1;
    }
    if(ch[0][0]==ch[1][1]&&ch[1][1]==ch[2][2])
        return 1;
    else if(ch[0][2]==ch[1][1]&&ch[1][1]==ch[2][0])
        return 1;
    else if(full_matrix(ch))
        return -1;
    else
        return 0;
}

int player_filling(char ch[3][3],int choice)
{
    int char_choice=choice+'0';
    int i=0,j=0;
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(ch[i][j]==char_choice&&ch[i][j]!='O'&&ch[i][j]!='X')
            {
                ch[i][j]='O';
                return 1;
            }
        }
    }
    return 0;
}

void computer_filling(char ch[3][3],int m[3][3])
{
    int i=0,j=0,product=1,maxproduct=1,row=0,col=0;
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(ch[i][j]=='O')
            {
                m[i][j]=1;
            }
        }
    }
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(m[i][j]==2)
            {
                m[i][j]=3;
                product=m[i][0]*m[i][1]*m[i][2];
                if(product==27)
                {
                    ch[i][j]='X';
                    return;
                }
                else if(maxproduct<product)
                {
                    maxproduct=product;
                    row=i;
                    col=j;
                }
                product=m[0][j]*m[1][j]*m[2][j];
                if(product==27)
                {
                    ch[i][j]='X';
                    return;
                }
                else if(maxproduct<product)
                {
                    maxproduct=product;
                    row=i;
                    col=j;
                }
                if(i==j)
                {
                    product=m[0][0]*m[1][1]*m[2][2];
                    if(product==27)
                    {
                        ch[i][j]='X';
                        return;
                    }
                    else if(maxproduct<product)
                    {
                        maxproduct=product;
                        row=i;
                        col=j;
                    }
                }
                if((i==0&&j==2)||(i==1&&j==1)||(i==2&&j==0))
                {
                    product=m[0][2]*m[1][1]*m[2][0];
                    if(product==27)
                    {
                        ch[i][j]='X';
                        return;
                    }
                    else if(maxproduct<product)
                    {
                        maxproduct=product;
                        row=i;
                        col=j;
                    }
                }
                m[i][j]=2;
            }
        }
    }
    for(i=0;i<3;i++)
    {
        for(j=0;j<3;j++)
        {
            if(m[i][j]==2)
            {
                m[i][j]=3;
                product=m[i][0]*m[i][1]*m[i][2];
                if(product==3)
                {
                    ch[i][j]='X';
                    if(evil==0)
                        return;
                }
                product=m[0][j]*m[1][j]*m[2][j];
                if(product==3)
                {
                    ch[i][j]='X';
                    if(evil==0)
                        return;
                }
                if(i==j)
                {
                    product=m[0][0]*m[1][1]*m[2][2];
                    if(product==3)
                    {
                        ch[i][j]='X';
                        if(evil==0)
                            return;
                    }
                }
                if((i==0&&j==2)||(i==1&&j==1)||(i==2&&j==0))
                {
                    product=m[0][2]*m[1][1]*m[2][0];
                    if(product==3)
                    {
                        ch[i][j]='X';
                        if(evil==0)
                            return;
                    }
                }
                m[i][j]=2;
            }
        }
    }
    ch[row][col]='X';
    m[row][col]=3;
}

int main()
{
    while(1)
    {
        char c[3][3]={
                {'1','2','3'},
                {'4','5','6'},
                {'7','8','9'}};

        int m[3][3]={
                {2,2,2},
                {2,2,2},
                {2,2,2}};
        printf("1.PLAY WITH SMART COMPUTER\n");
        printf("2.PLAY WITH EVIL COMPUTER\n");
        printf("3.PLAY WITH PLAYER\n");
        printf("4.EXIT\n");
        printf("ENTER YOUR CHOICE:");
        int play_choice;
        scanf("%d",&play_choice);
        int count=0;
        system("cls");
        switch(play_choice)
        {
        case 1:
        case 2:
            evil=(play_choice==2)?1:0;
            display_matrix(c);
            while(1)
            {
                int choice;
                printf("ENTER YOUR CHOICE:");
                scanf("%d",&choice);
                if(player_filling(c,choice))
                {
                    system("cls");
                    computer_filling(c,m);
                    if(winner(c)==1)
                    {
                        if(count%2!=0)
                        {
                            printf("CONGRATS, YOU WON THE GAME\n");
                        }
                        else
                        {
                            printf("COMPUTER WON THE GAME\nBETTER LUCK NEXT TIME\n");
                        }
                        break;
                    }
                    if(winner(c)==-1)
                    {
                        printf("MATCH DRAW\n");
                        break;
                    }
                }
                else
                {
                    printf("PLACE IS ALREADY FILLED\n");
                    continue;
                }
                display_matrix(c);
                count++;
            }
            break;
        case 3:
            display_matrix(c);
            int player;
            while(1)
            {
                if(count%2==0)
                    player=1;
                else
                    player=2;
                if(fill_choice(player,c))
                {
                    count++;
                    system("cls");
                    display_matrix(c);
                }
                else
                {
                    printf("place is already filled, enter a valid location:\n");
                }
                if(winner(c)==1)
                {
                    printf("Player %d WON\n",player);
                    break;
                }
                if(winner(c)==-1)
                {
                    printf("MATCH DRAW\n");
                    break;
                }
            }
            break;
        case 4:
            exit(0);
            break;
        default:
            printf("ENTER A VALID OPTION\n");
        }
    }
    getch();
}
